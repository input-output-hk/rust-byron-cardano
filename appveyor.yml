# Based on the "trust" template v0.1.2
# Distributed under the MIT software license, see the accompanying
# file COPYING or https://github.com/japaric/trust/tree/v0.1.2/LICENSE-MIT

environment:
  global:
    RUST_VERSION: stable
    CRATE_NAME: rust-cardano

  matrix:
    # MinGW i686 - Enable?
#    - TARGET: i686-pc-windows-gnu
#    - TARGET: i686-pc-windows-gnu
#      RUST_VERSION: beta
#    - TARGET: i686-pc-windows-gnu
#      RUST_VERSION: nightly

    # MinGW x86_64 - Enable?
#    - TARGET: x86_64-pc-windows-gnu
#    - TARGET: x86_64-pc-windows-gnu
#      RUST_VERSION: beta
#    - TARGET: x86_64-pc-windows-gnu
#      RUST_VERSION: nightly

    # MSVC i686 - Enable?
#    - TARGET: i686-pc-windows-msvc
#    - TARGET: i686-pc-windows-msvc
#      RUST_VERSION: beta
#    - TARGET: i686-pc-windows-msvc
#      RUST_VERSION: nightly

    - TARGET: x86_64-pc-windows-msvc
    - TARGET: x86_64-pc-windows-msvc
      RUST_VERSION: beta
    - TARGET: x86_64-pc-windows-msvc
      RUST_VERSION: nightly

install:
  - ps: >-
      If ($Env:TARGET -eq 'x86_64-pc-windows-gnu') {
        $Env:PATH += ';C:\msys64\mingw64\bin'
      } ElseIf ($Env:TARGET -eq 'i686-pc-windows-gnu') {
        $Env:PATH += ';C:\msys64\mingw32\bin'
      }
  - curl -sSf -o rustup-init.exe https://win.rustup.rs/
  - rustup-init.exe -y --default-host %TARGET% --default-toolchain %RUST_VERSION%
  - set PATH=%PATH%;C:\Users\appveyor\.cargo\bin
  - rustc -Vv
  - cargo -V

test_script:
  # we don't run the "test phase" when doing deploys
  - if [%APPVEYOR_REPO_TAG%]==[false] (
      cargo build --verbose --all &&
      cargo test --verbose --all
    )

#before_deploy:
#  # TODO Update this to build the artifacts that matter to you
#  - cargo rustc --target %TARGET% --release --bin hello -- -C lto
#  - ps: .ci\before_deploy.ps1
#
# deploy:
#   artifact: /.*\.zip/
#   # TODO update `auth_token.secure`
#   # - Create a `public_repo` GitHub token. Go to: https://github.com/settings/tokens/new
#   # - Encrypt it. Go to https://ci.appveyor.com/tools/encrypt
#   # - Paste the output down here
#   auth_token:
#     secure: t3puM/2hOig26EHhAodcZBc61NywF7/PFEpimR6SwGaCiqS07KR5i7iAhSABmBp7
#   description: ''
#   on:
#     # TODO Here you can pick which targets will generate binary releases
#     # In this example, there are some targets that are tested using the stable
#     # and nightly channels. This condition makes sure there is only one release
#     # for such targets and that's generated using the stable channel
#     RUST_VERSION: stable
#     appveyor_repo_tag: true
#   provider: GitHub

cache:
  - C:\Users\appveyor\.cargo\registry
  - target

branches:
  only:
    # Release tags
    - /^v\d+\.\d+\.\d+.*$/
    - master

#notifications:
#  - provider: Email
#    on_build_success: false

# Building is done in the test phase, so we disable Appveyor's build phase.
build: false
